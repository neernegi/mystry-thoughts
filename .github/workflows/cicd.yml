name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_ENV: test
  NEXT_PUBLIC_SOCKET_URL: http://localhost:3000
  HOSTNAME: "localhost"
  PORT: 3000

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
      CLOUD_API_KEY: ${{ secrets.CLOUD_API_KEY }}

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Start Socket.io server
        run: npm run dev:socket &

      - name: Run tests
        run: npm test

      - name: Stop Socket.io server
        run: pkill -f "tsx server.ts" || true

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

  deploy-to-render:
    name: Deploy to Render
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Render CLI
        run: npm install -g render-cli

      - name: Trigger Render Deployment
        env:
          RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          render deployments create \
            --service-id "$RENDER_SERVICE_ID" \
            --branch main \
            --token "$RENDER_TOKEN" \
            --no-preview \
            --no-wait
